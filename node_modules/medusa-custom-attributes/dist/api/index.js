"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StoreGetProductsParams = exports.AdminPostProductsProductReq = void 0;
const express_1 = require("express");
const body_parser_1 = __importDefault(require("body-parser"));
const medusa_1 = require("@medusajs/medusa");
const attribute_1 = __importDefault(require("./attribute"));
const medusa_2 = require("@medusajs/medusa");
const update_product_1 = require("@medusajs/medusa/dist/api/routes/admin/products/update-product");
const index_1 = require("@medusajs/medusa/dist/api/routes/store/products/index");
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
const validate_int_attributes_1 = require("../util/validate-int-attributes");
exports.default = (rootDirectory, options) => {
    const route = (0, express_1.Router)();
    route.use(body_parser_1.default.json());
    route.use((0, medusa_1.errorHandler)());
    route.use(body_parser_1.default.urlencoded({ extended: true }));
    const storeCorsOptions = {
        origin: options.projectConfig.store_cors.split(","),
        credentials: true,
    };
    const adminCorsOptions = {
        origin: options.projectConfig.admin_cors.split(","),
        credentials: true,
    };
    (0, attribute_1.default)(route, { storeCorsOptions, adminCorsOptions });
    return route;
};
class AdminAttributeValueReq {
}
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], AdminAttributeValueReq.prototype, "id", void 0);
class AdminIntAttributeValueReq {
}
__decorate([
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], AdminIntAttributeValueReq.prototype, "id", void 0);
__decorate([
    (0, class_transformer_1.Type)(() => Number),
    (0, class_validator_1.IsNumber)(),
    __metadata("design:type", Number)
], AdminIntAttributeValueReq.prototype, "value", void 0);
__decorate([
    (0, class_validator_1.IsString)(),
    __metadata("design:type", String)
], AdminIntAttributeValueReq.prototype, "attribute_id", void 0);
class AdminPostProductsProductReq extends update_product_1.AdminPostProductsProductReq {
}
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_transformer_1.Type)(() => AdminIntAttributeValueReq),
    (0, class_validator_1.ValidateNested)({ each: true }),
    (0, class_validator_1.IsArray)(),
    __metadata("design:type", Array)
], AdminPostProductsProductReq.prototype, "int_attribute_values", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_transformer_1.Type)(() => AdminAttributeValueReq),
    (0, class_validator_1.ValidateNested)({ each: true }),
    (0, class_validator_1.IsArray)(),
    __metadata("design:type", Array)
], AdminPostProductsProductReq.prototype, "attribute_values", void 0);
exports.AdminPostProductsProductReq = AdminPostProductsProductReq;
class StoreGetProductsParams extends index_1.StoreGetProductsParams {
}
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, validate_int_attributes_1.IsValidIntAttributes)(),
    __metadata("design:type", Object)
], StoreGetProductsParams.prototype, "int_attributes", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ each: true }),
    __metadata("design:type", Array)
], StoreGetProductsParams.prototype, "attributes", void 0);
exports.StoreGetProductsParams = StoreGetProductsParams;
(0, medusa_2.registerOverriddenValidators)(AdminPostProductsProductReq);
(0, medusa_2.registerOverriddenValidators)(StoreGetProductsParams);
