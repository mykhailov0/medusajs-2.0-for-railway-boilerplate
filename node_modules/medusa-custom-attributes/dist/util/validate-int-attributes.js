"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IsValidIntAttributes = void 0;
const class_validator_1 = require("class-validator");
let IntAttributesValidator = class IntAttributesValidator {
    validate(object) {
        if (!object || typeof object !== "object") {
            return false;
        }
        for (const key in object) {
            if (!object.hasOwnProperty(key) ||
                !Array.isArray(object[key]) ||
                !object[key].every((value) => !isNaN(Number(value))) ||
                object[key].length < 1 ||
                object[key].length > 2) {
                return false;
            }
        }
        return true;
    }
    defaultMessage() {
        return `'int_attributes' must have the form {[string]: [number, number?]}`;
    }
};
IntAttributesValidator = __decorate([
    (0, class_validator_1.ValidatorConstraint)({ name: "isUniqueArray", async: false })
], IntAttributesValidator);
function IsValidIntAttributes(validationOptions) {
    return function (object, propertyName) {
        (0, class_validator_1.registerDecorator)({
            target: object.constructor,
            propertyName: propertyName,
            options: validationOptions,
            constraints: [],
            validator: IntAttributesValidator,
        });
    };
}
exports.IsValidIntAttributes = IsValidIntAttributes;
