"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Attribute = exports.AttributeType = void 0;
const typeorm_1 = require("typeorm");
const product_category_1 = require("./product-category");
const medusa_1 = require("@medusajs/medusa");
const medusa_2 = require("@medusajs/medusa");
const attribute_value_1 = require("./attribute-value");
const lodash_1 = require("lodash");
const int_attribute_value_1 = require("./int-attribute-value");
var AttributeType;
(function (AttributeType) {
    AttributeType["MULTI"] = "multi";
    AttributeType["SINGLE"] = "single";
    AttributeType["BOOLEAN"] = "boolean";
    AttributeType["RANGE"] = "range";
})(AttributeType = exports.AttributeType || (exports.AttributeType = {}));
let Attribute = class Attribute extends medusa_2.BaseEntity {
    beforeInsert() {
        this.id = (0, medusa_1.generateEntityId)(this.id, "attr");
        if (!this.handle) {
            this.handle = (0, lodash_1.kebabCase)(this.name);
        }
    }
};
__decorate([
    (0, typeorm_1.Column)(),
    __metadata("design:type", String)
], Attribute.prototype, "name", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    __metadata("design:type", String)
], Attribute.prototype, "description", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: "enum", enum: AttributeType }),
    __metadata("design:type", String)
], Attribute.prototype, "type", void 0);
__decorate([
    (0, typeorm_1.OneToMany)(() => attribute_value_1.AttributeValue, (v) => v.attribute, {
        cascade: true,
        onDelete: "CASCADE",
    }),
    __metadata("design:type", Array)
], Attribute.prototype, "values", void 0);
__decorate([
    (0, typeorm_1.Column)({ unique: true }),
    __metadata("design:type", String)
], Attribute.prototype, "handle", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: "boolean", default: false }),
    __metadata("design:type", Boolean)
], Attribute.prototype, "filterable", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: "jsonb", nullable: true }),
    __metadata("design:type", Object)
], Attribute.prototype, "metadata", void 0);
__decorate([
    (0, typeorm_1.ManyToMany)(() => product_category_1.ProductCategory),
    (0, typeorm_1.JoinTable)(),
    __metadata("design:type", Array)
], Attribute.prototype, "categories", void 0);
__decorate([
    (0, typeorm_1.OneToMany)(() => int_attribute_value_1.IntAttributeValue, (v) => v.attribute, {
        onDelete: "CASCADE",
        cascade: true,
    }),
    __metadata("design:type", Array)
], Attribute.prototype, "int_values", void 0);
__decorate([
    (0, typeorm_1.BeforeInsert)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], Attribute.prototype, "beforeInsert", null);
Attribute = __decorate([
    (0, typeorm_1.Entity)()
], Attribute);
exports.Attribute = Attribute;
