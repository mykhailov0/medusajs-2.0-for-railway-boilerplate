"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = exports.SUPPORTED_EVENTS = void 0;
exports.default = webhookHandle;
const utils_1 = require("@medusajs/utils");
const liqpay_payment_processor_1 = __importDefault(require("../services/liqpay-payment-processor"));
exports.SUPPORTED_EVENTS = ["charge.success"];
exports.config = {
    event: "liqpay.webhook_event",
};
async function webhookHandle({ data, container, }) {
    const pluginConfiguration = container.resolve(`pp_${liqpay_payment_processor_1.default.identifier}`).configuration;
    const cartId = data.data.order_id;
    if (!cartId) {
        console.error("LP_P_Debug: No cart_id found in webhook transaction metadata");
        return;
    }
    switch (data.event) {
        case "success": {
            await handleChargeSuccess(container, cartId);
            break;
        }
        default:
            break;
    }
    if (pluginConfiguration.debug) {
        console.info(`LP_P_Debug: Handled LiqPay webhook event: ${data.event} successfully`);
    }
}
async function handleChargeSuccess(container, cartId) {
    var _a, _b;
    const cartService = container.resolve("cartService");
    const orderService = container.resolve("orderService");
    const order = await orderService
        .retrieveByCartId(cartId)
        .catch(() => undefined);
    if (order) {
        // Order already placed, do nothing
        return;
    }
    // Verify cart has selected payment session
    const cart = await cartService.retrieve(cartId, {
        relations: ["payment_sessions"]
    });
    const liqpaySession = (_a = cart.payment_sessions) === null || _a === void 0 ? void 0 : _a.find((ps) => ps.provider_id === "liqpay");
    if (!((_b = cart.payment_sessions) === null || _b === void 0 ? void 0 : _b.some(ps => ps.is_selected)) && liqpaySession) {
        await cartService.setPaymentSession(cartId, liqpaySession.provider_id);
    }
    const completionStrategy = container.resolve("cartCompletionStrategy");
    const idempotencyKeyService = container.resolve("idempotencyKeyService");
    const manager = container.resolve("manager");
    await manager.transaction(async (transactionManager) => {
        var _a;
        const idempotencyKeyServiceTx = idempotencyKeyService.withTransaction(transactionManager);
        let idempotencyKey = await idempotencyKeyServiceTx
            .retrieve({
            request_path: "/liqpay/webhook",
            idempotency_key: cartId,
        })
            .catch(() => undefined);
        if (!idempotencyKey) {
            idempotencyKey = await idempotencyKeyService
                .withTransaction(transactionManager)
                .create({
                request_path: "/liqpay/webhook",
                idempotency_key: cartId,
            });
        }
        const cart = await cartService
            .withTransaction(transactionManager)
            .retrieve(cartId, { select: ["context"] });
        const { response_code, response_body } = await completionStrategy
            .withTransaction(transactionManager)
            .complete(cartId, idempotencyKey, { ip: (_a = cart.context) === null || _a === void 0 ? void 0 : _a.ip });
        if (response_code !== 200) {
            console.error(`LP_P_Debug: Error completing cart from webhook event with id ${cartId}`, JSON.stringify(response_body, null, 2));
            throw new utils_1.MedusaError(utils_1.MedusaError.Types.UNEXPECTED_STATE, response_body["message"], response_body["code"]);
        }
    });
}
