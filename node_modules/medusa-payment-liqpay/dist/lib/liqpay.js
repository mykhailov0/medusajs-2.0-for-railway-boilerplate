"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LIQPAY_API_PATH = void 0;
const axios_1 = __importDefault(require("axios"));
const axios_retry_1 = __importDefault(require("axios-retry"));
const crypto = __importStar(require("crypto"));
exports.LIQPAY_API_PATH = "https://www.liqpay.ua/api";
class LiqPay {
    constructor(publicKey, privateKey, options) {
        this.transaction = {
            get: ({ id }) => this.requestLiqPayAPI({
                path: "/request",
                method: "POST",
                data: this.constructObject({
                    action: "status",
                    version: 3,
                    order_id: id,
                    public_key: this.publicKey
                })
            }),
        };
        this.refund = {
            create: ({ id, amount }) => this.requestLiqPayAPI({
                path: "/request",
                method: "POST",
                data: this.constructObject({
                    action: "refund",
                    amount: amount,
                    version: 3,
                    order_id: id,
                    public_key: this.publicKey
                }),
            }),
        };
        this.publicKey = publicKey;
        this.privateKey = privateKey;
        this.axiosInstance = axios_1.default.create({
            baseURL: exports.LIQPAY_API_PATH,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
        });
        if ((options === null || options === void 0 ? void 0 : options.disable_retries) !== true) {
            (0, axios_retry_1.default)(this.axiosInstance, {
                retries: 3,
                // Enables retries on network errors, idempotent http methods, and 5xx errors
                retryCondition: axios_retry_1.default.isNetworkOrIdempotentRequestError,
                // Exponential backoff with jitter
                retryDelay: axios_retry_1.default.exponentialDelay,
            });
        }
    }
    async requestLiqPayAPI(request) {
        var _a, _b, _c;
        const options = {
            method: request.method,
            url: request.path,
            params: request.query,
            data: request.data,
        };
        try {
            const res = await this.axiosInstance(options);
            return res.data;
        }
        catch (error) {
            if (axios_1.default.isAxiosError(error)) {
                throw new Error(`Error from LiqPay API with status code ${(_a = error.response) === null || _a === void 0 ? void 0 : _a.status}: ${(_c = (_b = error.response) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.err_description}`);
            }
            throw error;
        }
    }
    constructSignature(params) {
        const data = this.constructData(params);
        return this.sign(this.privateKey + data + this.privateKey);
    }
    constructObject(params) {
        const data = new URLSearchParams();
        data.append('data', this.constructData(params));
        data.append('signature', this.constructSignature(params));
        return data;
    }
    sign(str) {
        const sha1 = crypto.createHash('sha1');
        sha1.update(str);
        return sha1.digest('base64');
    }
    constructData(params) {
        return Buffer.from(JSON.stringify(params)).toString('base64');
    }
}
exports.default = LiqPay;
