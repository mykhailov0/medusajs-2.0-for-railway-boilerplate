"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.POST = void 0;
const liqpay_payment_processor_1 = __importDefault(require("../../../services/liqpay-payment-processor"));
const liqpay_1 = __importDefault(require("../../../lib/liqpay"));
const POST = async (req, res) => {
    var _a, _b;
    try {
        const pluginConfiguration = req.scope.resolve(`pp_${liqpay_payment_processor_1.default.identifier}`).configuration;
        if (pluginConfiguration.debug) {
            console.info("LP_P_Debug: Received webhook request with body:", JSON.stringify(req.body, null, 2));
        }
        const publicKey = pluginConfiguration.public_key;
        const privateKey = pluginConfiguration.private_key;
        if (!publicKey) {
            console.error("LP_P_Debug: No public key provided for LiqPay plugin");
            return res.sendStatus(500);
        }
        if (!privateKey) {
            console.error("LP_P_Debug: No private key provided for LiqPay plugin");
            return res.sendStatus(500);
        }
        const liqPay = new liqpay_1.default(publicKey, privateKey);
        // Validate webhook event
        const signature = liqPay.sign(privateKey + req.body.data + privateKey);
        if (pluginConfiguration.debug) {
            console.info("LP_P_Debug: Calculated signature:", signature);
            console.info("LP_P_Debug: Received signature:", req.body.signature);
        }
        if (signature !== req.body.signature) {
            console.error("LP_P_Debug: Invalid signature");
            console.error("LP_P_Debug: Expected:", signature);
            console.error("LP_P_Debug: Received:", req.body.signature);
            return res.status(400).send("Invalid signature");
        }
        const jsonString = Buffer.from(req.body.data, 'base64').toString();
        if (pluginConfiguration.debug) {
            console.info("LP_P_Debug: Decoded webhook data:", jsonString);
        }
        const obj = JSON.parse(jsonString);
        if (pluginConfiguration.debug) {
            console.info("LP_P_Debug: Parsed LiqPay response:", JSON.stringify(obj, null, 2));
        }
        if (obj.status !== 'success' && obj.status !== 'subscribed') {
            if (pluginConfiguration.debug) {
                console.info(`LP_P_Debug: Skipping non-success status: ${obj.status}`);
            }
            return res.sendStatus(200);
        }
        // Add cart service resolution
        const cartService = req.scope.resolve("cartService");
        if (pluginConfiguration.debug) {
            console.info("LP_P_Debug: Retrieving cart:", obj.order_id);
        }
        // Get cart and ensure payment session is selected
        const cart = await cartService.retrieve(obj.order_id, {
            select: ["id"],
            relations: ["payment_sessions"]
        });
        if (pluginConfiguration.debug) {
            console.info("LP_P_Debug: Retrieved cart with payment sessions:", JSON.stringify(cart.payment_sessions, null, 2));
        }
        // Find and select LiqPay payment session if none selected
        const liqpaySession = (_a = cart.payment_sessions) === null || _a === void 0 ? void 0 : _a.find((ps) => ps.provider_id === "liqpay");
        if (liqpaySession) {
            if (pluginConfiguration.debug) {
                console.info("LP_P_Debug: Found LiqPay payment session:", JSON.stringify(liqpaySession, null, 2));
            }
            if (!((_b = cart.payment_sessions) === null || _b === void 0 ? void 0 : _b.some(ps => ps.is_selected))) {
                if (pluginConfiguration.debug) {
                    console.info("LP_P_Debug: No payment session selected, selecting LiqPay session");
                }
                await cartService.setPaymentSession(cart.id, liqpaySession.provider_id);
            }
        }
        else {
            console.warn("LP_P_Debug: No LiqPay payment session found for cart:", cart.id);
        }
        //TODO: Change event, send syntetic event
        if (pluginConfiguration.debug) {
            console.info(`LP_P_Debug: Received LiqPay webhook event: ${obj.status} with data:`, JSON.stringify(obj, null, 2));
        }
        const eventData = {
            event: obj.status,
            data: obj,
        };
        if (pluginConfiguration.debug) {
            console.info("LP_P_Debug: Emitting webhook event:", JSON.stringify(eventData, null, 2));
        }
        const eventBus = req.scope.resolve("eventBusService");
        await eventBus.emit("liqpay.webhook_event", eventData, {
            // Delayed to prevent race conditions with manual order confirmation
            delay: 5000,
        });
        if (pluginConfiguration.debug) {
            console.info("LP_P_Debug: Webhook processing completed successfully");
        }
        return res.sendStatus(200);
    }
    catch (err) {
        console.error("LP_P_Debug: Error handling LiqPay webhook event", err);
        console.error("LP_P_Debug: Error details:", {
            message: err instanceof Error ? err.message : "Unknown error",
            stack: err instanceof Error ? err.stack : undefined
        });
        return res.sendStatus(500);
    }
};
exports.POST = POST;
