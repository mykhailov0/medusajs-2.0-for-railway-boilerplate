import LiqPay from "../lib/liqpay";
import { AbstractPaymentProcessor, CartService, MedusaContainer, PaymentProcessorContext, PaymentProcessorError, PaymentProcessorSessionResponse, PaymentSessionStatus } from "@medusajs/medusa";
export interface LiqPayPaymentProcessorConfig extends Record<string, unknown> {
    /**
     * LiqPay Public Key
     *
     * Should be in the format sandbox_... or ...
     */
    public_key: string;
    /**
     * LiqPay Private Key
     *
     * Should be in the format sandbox_... or ...
     */
    private_key: string;
    /**
     * Disable retries on network errors and 5xx errors on idempotent requests to Paystack
     *
     * Generally, you should not disable retries, these errors are usually temporary
     * but it can be useful for debugging
     * @default false
     */
    disable_retries?: boolean;
    /**
     * Debug mode
     * If true, logs helpful debug information to the console
     * Logs are prefixed with "PS_P_Debug"
     */
    debug?: boolean;
}
declare class LiqPayPaymentProcessor extends AbstractPaymentProcessor {
    static identifier: string;
    protected readonly cartService: CartService;
    protected readonly configuration: LiqPayPaymentProcessorConfig;
    protected readonly liqpay: LiqPay;
    protected readonly debug: boolean;
    constructor(container: Record<string, any> & MedusaContainer, options: LiqPayPaymentProcessorConfig);
    private convertToDecimal;
    authorizePayment(paymentSessionData: Record<string, unknown> & {
        orderId: string;
        cartId: string;
    }, context: Record<string, unknown>): Promise<PaymentProcessorError | {
        status: PaymentSessionStatus;
        data: PaymentProcessorSessionResponse["session_data"];
    }>;
    cancelPayment(paymentSessionData: Record<string, unknown>): Promise<Record<string, unknown> | PaymentProcessorError | PaymentProcessorSessionResponse["session_data"]>;
    capturePayment(paymentSessionData: Record<string, unknown>): Promise<Record<string, unknown> | PaymentProcessorError | PaymentProcessorSessionResponse["session_data"]>;
    deletePayment(paymentSessionData: Record<string, unknown>): Promise<Record<string, unknown> | PaymentProcessorError | PaymentProcessorSessionResponse["session_data"]>;
    getPaymentStatus(paymentSessionData: Record<string, unknown> & {
        cartId?: string;
    }): Promise<PaymentSessionStatus>;
    initiatePayment(context: PaymentProcessorContext): Promise<PaymentProcessorError | (PaymentProcessorSessionResponse & {
        session_data: {
            cartId: string;
        };
    })>;
    refundPayment(paymentSessionData: Record<string, unknown> & {
        cartId?: string;
    }, refundAmount: number): Promise<PaymentProcessorError | PaymentProcessorSessionResponse["session_data"]>;
    retrievePayment(paymentSessionData: Record<string, unknown> & {
        cartId?: string;
    }): Promise<PaymentProcessorError | PaymentProcessorSessionResponse["session_data"]>;
    updatePayment(context: PaymentProcessorContext): Promise<PaymentProcessorError | (PaymentProcessorSessionResponse & {
        session_data: {
            cartId: string;
        };
    }) | void>;
    updatePaymentData(sessionId: string, data: Record<string, unknown>): Promise<PaymentProcessorSessionResponse["session_data"] | PaymentProcessorError>;
    protected buildError(message: string, e: {
        code?: string;
        detail: string;
    } | Error): PaymentProcessorError;
}
export default LiqPayPaymentProcessor;
